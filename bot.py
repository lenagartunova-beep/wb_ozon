"""
WB/OZON GPT Bot ‚Äî Telegram-–±–æ—Ç –Ω–∞ long polling.
–ó–∞–ø—É—Å–∫ –Ω–∞ Render –∫–∞–∫ Background Worker –ò–õ–ò –ª–æ–∫–∞–ª—å–Ω–æ.

–ù—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- OPENAI_API_KEY      ‚Äî –∫–ª—é—á OpenAI (—Ñ–æ—Ä–º–∞—Ç sk-...)
- TELEGRAM_BOT_TOKEN  ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ BotFather

–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
  /start   ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  /analyze ‚Äî —Ä–µ–∂–∏–º –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
  /review  ‚Äî —Ä–µ–∂–∏–º –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã (3 —Å—Ç–∏–ª—è)
  /faq     ‚Äî —Ä–µ–∂–∏–º –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–∫—Ä–∞—Ç–∫–æ)
  /help    ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (requirements.txt):
  python-telegram-bot==21.4
  openai
  python-dotenv
"""

import os
import logging
from typing import List

from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("wb-ozon-bot")

# ---------- –ö–õ–Æ–ß–ò/–ù–ê–°–¢–†–û–ô–ö–ò ----------
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not OPENAI_API_KEY:
    log.warning("–ù–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not TELEGRAM_TOKEN:
    log.warning("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# ---------- –ü–ï–†–°–û–ù–ê –ê–°–°–ò–°–¢–ï–ù–¢–ê –ò –†–ï–ñ–ò–ú–´ ----------
SYSTEM_BASE = (
    "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ Wildberries –∏ Ozon: –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, "
    "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ (SEO/–∑–∞–≥–æ–ª–æ–≤–æ–∫/–æ–ø–∏—Å–∞–Ω–∏–µ/—Ñ–æ—Ç–æ/–£–¢–ü/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏), "
    "–æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. "
    "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "
    "üìä –ê–Ω–∞–ª–∏–∑ / ‚úÖ –í—ã–≤–æ–¥—ã / üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
)

MODES = {
    "analyze": "–†–µ–∂–∏–º: –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–£–†–ï–ù–¢–û–í. "
               "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫:\n\n"
               "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:\n"
               "- –ó–∞–≥–æ–ª–æ–≤–∫–∏: ...\n"
               "- –û–ø–∏—Å–∞–Ω–∏—è: ...\n"
               "- –¶–µ–Ω—ã: ...\n"
               "- –û—Ç–∑—ã–≤—ã: ...\n\n"
               "–ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞:\n"
               "- –ó–∞–≥–æ–ª–æ–≤–æ–∫: ...\n"
               "- –û–ø–∏—Å–∞–Ω–∏–µ: ...\n"
               "- –¶–µ–Ω–∞: ...\n"
               "- –§–æ—Ç–æ/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ...\n",
    "review":  "–†–µ–∂–∏–º: –û–¢–í–ï–¢–´ –ù–ê –û–¢–ó–´–í–´. "
               "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ —Ç–∞–∫:\n\n"
               "–û—Ç–∑—ã–≤: \"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–≥–∞—è, –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥–Ω–µ–µ\"",
    "faq":     "–†–µ–∂–∏–º: –û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´. "
               "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–∏—à–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Ç–∞–∫:\n\n"
               "–í–æ–ø—Ä–æ—Å: \"–ü–æ–¥–æ–π–¥—ë—Ç –ª–∏ —ç—Ç–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ –¥–ª—è —Å–ø–æ—Ä—Ç–∞?\""
}

# –•—Ä–∞–Ω–∏–º —Ä–µ–∂–∏–º—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_modes: dict[int, str] = {}

def split_message(text: str, chunk_size: int = 3200) -> List[str]:
    if not text:
        return [""]
    return [text[i:i + chunk_size] for i in range(0, len(text), chunk_size)]

def build_instructions(user_id: int) -> str:
    mode = user_modes.get(user_id, "analyze")
    return f"{SYSTEM_BASE}\n{MODES[mode]}"

# ---------- –•–≠–ù–î–õ–ï–†–´ ----------
HELP_TEXT = (
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/analyze ‚Äî –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫\n"
    "/review ‚Äî –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã (3 —Å—Ç–∏–ª—è)\n"
    "/faq ‚Äî –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (–∫—Ä–∞—Ç–∫–æ)\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ /analyze ‚Üí –≤—Å—Ç–∞–≤—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö –∏ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ.\n"
    "‚Ä¢ /review ‚Üí –≤—Å—Ç–∞–≤—å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.\n"
    "‚Ä¢ /faq ‚Üí –≤—Å—Ç–∞–≤—å –≤–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.\n"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_modes[update.effective_user.id] = "analyze"
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ WB/OZON.\n\n"
        + HELP_TEXT +
        "\n–°–µ–π—á–∞—Å –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º: /analyze."
    )
    await update.message.reply_text(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str):
    user_modes[update.effective_user.id] = mode
    names = {"analyze": "–ê–ù–ê–õ–ò–ó", "review": "–û–¢–ó–´–í–´", "faq": "–í–û–ü–†–û–°–´"}
    await update.message.reply_text(
        f"–ì–æ—Ç–æ–≤–æ! –†–µ–∂–∏–º: {names[mode]}.\n\n{MODES[mode]}"
    )

async def mode_analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_mode(update, context, "analyze")

async def mode_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_mode(update, context, "review")

async def mode_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_mode(update, context, "faq")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return

    user_id = update.effective_user.id
    prompt = msg.text.strip()
    instructions = build_instructions(user_id)

    log.info("–ó–∞–ø—Ä–æ—Å –æ—Ç %s | —Ä–µ–∂–∏–º=%s | %s",
             user_id, user_modes.get(user_id, "analyze"),
             prompt[:160].replace("\n", " "))

    try:
        resp = client.responses.create(
            model="gpt-4o-mini",
            instructions=instructions,
            input=prompt
        )
        answer = resp.output_text or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞."
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ OpenAI: %s", e)
        answer = f"–£–ø—Å, –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"

    for part in split_message(answer):
        await msg.reply_text(part)

# ---------- –ó–ê–ü–£–°–ö ----------
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("analyze", mode_analyze))
    app.add_handler(CommandHandler("review", mode_review))
    app.add_handler(CommandHandler("faq", mode_faq))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (long polling).")
    app.run_polling()

if __name__ == "__main__":
    main()
